# Create a dictionary named holidays that pairs the name of
# the holiday with the date it will occur this year, include at least four
# key-value pairs
# example: holiday = {'Independence Day':  'July 4'}
holiday = dict()
holiday = {'Election Day': 'November 8', 'Veterans Day': 'November 11', 'Thanksgiving Day': 'November 24',
                    'Christmas Day': 'December 25'}

# print holiday -  does the order match what you put it in?
print(holiday)  # It does not, because according to the book, "The order of the key-value pairs is not the same"

# run the len function on holiday - how does it calculate the results? ** print(len(holiday))
print(len(holiday))  # According to the book, "it returns the number of key-value pairs"


# Write the code to use the "in" function to find one of the keys in your dictionary. Make sure to surround the
# code with a print statement so that the result prints on screen
print('Election Day' in holiday)


# now write the code to look for a key that is not in the dictionary. Make sure to surround the code
# with a print statement so the result prints on screen
print('New Years Day' in holiday)



# now write the code to find a value in your dictionary, use the print statement to show the results
print('November 8' in holiday)

# print all of the values in the dictionary
print(holiday)


# 11.2 Looping and Dictionaries
# Write the histogram code and test it by passing in a word that has at least two of one letter
# Print the result of running the histogram code


def histogram(s):
    d = dict()
    for c in s:
        if c not in d:
            d[c] = 1
        else:
            d[c] += 1
    return d

h = histogram('Greetings')
print(h)
# Exercise 11.2 Rewrite the histogram code using the get method, test with the same word, name the function histogram2
# hint assign the result of d.get(c,0) to a value then add one to the value of d[c]

def histogram2(s):
    d = dict()
    for c in s:
        d[c] = d.get(c, 0) + 1
    return d


h2 = histogram2('Hello')
print(h2)
# Looping and Dictionaries
# use a for statement to print your holiday dictionary
# What prints? The keys or the values?
for i in holiday:
    print(holiday[i])  # the values print


print ("\n\n\n")  # leave this code so that there are blank lines before the next exercise
# now write code that prints all of the keys and all of their values in the holiday dictionary
# if you use the print statement then values separated by commas they appear on the same line
for i in holiday:
    print(i, holiday[i])


print ("\n\n\n")  # leave this code so that there are blank lines before the next exercise
# Reverse Lookup
# Type the code for the Reverse Lookup from 11.3 below


def reverse_lookup(d, v):
    for k in d:
        if d[k] == v:
            return k

# Test the code by calling it with the holiday dictionary and one of your values (print the result)
r = reverse_lookup(holiday, 'November 8')
print(r)
# Call the code a second time with a value that doesn't exist, run the program
l = reverse_lookup(holiday, 'November 9')
print(l)

# Copy and paste the error code here, add # as needed to make the error a comment
# There was no error, it automatically set the value to "None"
# leave the line of code that caused the error, but put a # in front of it to make it a comment


# 11.4 Dictionaries and lists
# Type in the code to invert a dictionary
# Call the invert_dict function with the holiday dictionary
# print the results
print("\n\n")


def invert_dict(d):
    inverse = dict()
    for key in d:
        val = d[key]
        if val not in inverse:
            inverse[val] = [key]
        else:
            inverse[val].append(key)
    return inverse

x = invert_dict(holiday)
print(x)
# Exercise 11.5 Exercise 11.5. Read the documentation of the dictionary method setdefault and use it to write a
# more concise version of invert_dict. Solution: http://thinkpython.com/code/invert_dict. py .

# This is from the answer key, I changed it up a bit so I don't get the "Shadows name 'inverse' from outer scope..."
inverse2 = {}


def invert_dict(d):
    global inverse2
    for key, val2 in d.iteritems():
        inverse2.setdefault(val2, []).append(key)
    return inverse2


if __name__ == '__main__':
    d = dict(a=1, b=2, c=3, z=1)
    inverse2 = invert_dict(d)
    for val2, keys in inverse2.iteritems():
        print(val2, keys)
